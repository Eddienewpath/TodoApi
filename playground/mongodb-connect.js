// pull MongoClient out of mongodb library. 
// MongoClient lets you connect to the database. 
// const MongoClient = require('mongodb').MongoClient;
const {MongoClient, ObjectID} = require('mongodb'); // es6 destructuring. 

// let obj = new ObjectID(); // this will create an Object id instance. 
// console.log(obj);

//es6 feature, object destructuring. 
let user = {name: 'eddie', age : 25};
// provide the name of attribute we want to pull out and wrapped in a pair of curly braces. 
// let {name} = user; // we successfully destruct the user object and pull out the name attribute and assign whatever value it was in the obejct. 
// console.log(name);
//'mongodb://' is a mongo protocal
MongoClient.connect('mongodb://localhost:27017/TodoApp', (err, client) => {
    if(err){
        return console.log('unable to connect to mongodb server');
    }
    console.log('connected to mongodb server');
    const db = client.db('TodoApp');

    // db.collection('Todos').insertOne({
    //     text: 'something  to do',
    //     completed: false
    // }, (err, result) => {
    //     if(err){
    //         return console.log('unable to insert todo');
    //     }
    //     // ops atrribute will store all the documents that were inserted. 
    //     console.log(JSON.stringify(result.ops, undefined, 2));
    // }); // mysql is called table
    db.collection('Users').insertOne({
        // you can specify a custom object id instead of id generated by mongo.
        // _id: 123, 
        name: 'eddie',
        age: 29,
        location: 'sf'
    }, (err, result)=> {
        if(err){
            return console.log('unable to insert user');
        }
        console.log(JSON.stringify(result.ops, undefined, 2));
        // coz the time stamp was encoded into the object id, we can 
        // call getTimestamp method to pull out the time stamp.
        console.log(result.ops[0]._id.getTimestamp());
    });
    client.close();
});
